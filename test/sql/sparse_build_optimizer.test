# name: test/sql/sparse_build_optimizer.test
# description: test the SparseBuildOptimizer
# group: [sql]

require fivetran

statement ok
create macro maybe_null(c, p) as
case when random() < p then c else null end

statement ok
create macro input_data(nrow, pnonnull) as table (
    with cte as (
        select
            range pk,
            random() as double_col_0,
            random() as double_col_1,
            random() as double_col_2,
            random() as double_col_3,
            random() as double_col_4,
            hash(random()) as long_col_0,
            hash(random()) as long_col_1,
            hash(random()) as long_col_2,
            hash(random()) as long_col_3,
            hash(random()) as long_col_4,
            'longstring' || hash(random()) as string_col_0,
            'longstring' || hash(random()) as string_col_1,
            'longstring' || hash(random()) as string_col_2,
            'longstring' || hash(random()) as string_col_3,
            'longstring' || hash(random()) as string_col_4,
        from
            range(nrow)
    )
    select maybe_null(columns(*), pnonnull) as "\0"
    from cte
)

# quick check that struct_to_sparse_variant can handle this input
statement ok
select struct_to_sparse_variant(id)
from input_data(10, 0.1) id

statement ok
create or replace table build as from input_data(10, 0.1)

statement ok
create or replace table probe as from input_data(10, 1), range(30)

# test that the optimization is triggered by inspecting the plan
statement ok
PRAGMA explain_output = 'OPTIMIZED_ONLY'

query II
explain select
    p.pk,
    coalesce(b.double_col_0, p.double_col_0),
    coalesce(b.double_col_1, p.double_col_1),
    coalesce(b.double_col_2, p.double_col_2),
    coalesce(b.double_col_3, p.double_col_3),
    coalesce(b.double_col_4, p.double_col_4),
    coalesce(b.long_col_0, p.long_col_0),
    coalesce(b.long_col_1, p.long_col_1),
    coalesce(b.long_col_2, p.long_col_2),
    coalesce(b.long_col_3, p.long_col_3),
    coalesce(b.long_col_4, p.long_col_4),
    coalesce(b.string_col_0, p.string_col_0),
    coalesce(b.string_col_1, p.string_col_1),
    coalesce(b.string_col_2, p.string_col_2),
    coalesce(b.string_col_3, p.string_col_3),
    coalesce(b.string_col_4, p.string_col_4),
from probe p
left join build b
using (pk)
order by all
----
logical_opt	<REGEX>:.*struct_to_sparse_variant.*

# test each query with and without optimizer enabled, should yield same results
foreach threshold -1 0

statement ok
set fivetran_sparse_build_optimizer_column_threshold to ${threshold}

# this tests with/without projection maps
foreach do '' 'column_lifetime'

statement ok
set disabled_optimizers to ${do}

# test with a bunch of different column combinations
query IIIIIIIIIIIIIIII nosort q0
select
    p.pk,
    coalesce(b.double_col_0, p.double_col_0),
    coalesce(b.double_col_1, p.double_col_1),
    coalesce(b.double_col_2, p.double_col_2),
    coalesce(b.double_col_3, p.double_col_3),
    coalesce(b.double_col_4, p.double_col_4),
    coalesce(b.long_col_0, p.long_col_0),
    coalesce(b.long_col_1, p.long_col_1),
    coalesce(b.long_col_2, p.long_col_2),
    coalesce(b.long_col_3, p.long_col_3),
    coalesce(b.long_col_4, p.long_col_4),
    coalesce(b.string_col_0, p.string_col_0),
    coalesce(b.string_col_1, p.string_col_1),
    coalesce(b.string_col_2, p.string_col_2),
    coalesce(b.string_col_3, p.string_col_3),
    coalesce(b.string_col_4, p.string_col_4),
from probe p
left join build b
using (pk)
order by all
----

query IIIIIIIIIIIIIIII nosort q1
select
    p.pk,
    b.double_col_0,
    p.double_col_1,
    b.double_col_2,
    p.double_col_3,
    b.double_col_4,
    p.long_col_0,
    b.long_col_1,
    p.long_col_2,
    b.long_col_3,
    p.long_col_4,
    b.string_col_0,
    p.string_col_1,
    b.string_col_2,
    p.string_col_3,
    b.string_col_4,
from probe p
left join build b
using (pk)
order by all
----

query IIIIIIIIIIIIIIII nosort q2
select
    p.pk,
    b.double_col_0,
    b.double_col_1,
    b.double_col_2,
    b.double_col_3,
    b.double_col_4,
    b.long_col_0,
    b.long_col_1,
    b.long_col_2,
    b.long_col_3,
    b.long_col_4,
    b.string_col_0,
    b.string_col_1,
    b.string_col_2,
    b.string_col_3,
    b.string_col_4,
from probe p
left join build b
using (pk)
order by all
----

endloop

endloop

# all the queries in TPC-DS with a LEFT join
statement ok
CREATE TABLE call_center(cc_call_center_sk BIGINT, cc_call_center_id VARCHAR, cc_rec_start_date DATE, cc_rec_end_date DATE, cc_closed_date_sk BIGINT, cc_open_date_sk BIGINT, cc_name VARCHAR, cc_class VARCHAR, cc_employees BIGINT, cc_sq_ft BIGINT, cc_hours VARCHAR, cc_manager VARCHAR, cc_mkt_id BIGINT, cc_mkt_class VARCHAR, cc_mkt_desc VARCHAR, cc_market_manager VARCHAR, cc_division BIGINT, cc_division_name VARCHAR, cc_company BIGINT, cc_company_name VARCHAR, cc_street_number VARCHAR, cc_street_name VARCHAR, cc_street_type VARCHAR, cc_suite_number VARCHAR, cc_city VARCHAR, cc_county VARCHAR, cc_state VARCHAR, cc_zip VARCHAR, cc_country VARCHAR, cc_gmt_offset DECIMAL(5,2), cc_tax_percentage DECIMAL(5,2));;

statement ok
CREATE TABLE catalog_page(cp_catalog_page_sk BIGINT, cp_catalog_page_id VARCHAR, cp_start_date_sk BIGINT, cp_end_date_sk BIGINT, cp_department VARCHAR, cp_catalog_number BIGINT, cp_catalog_page_number BIGINT, cp_description VARCHAR, cp_type VARCHAR);;

statement ok
CREATE TABLE catalog_returns(cr_returned_date_sk BIGINT, cr_returned_time_sk BIGINT, cr_item_sk BIGINT, cr_refunded_customer_sk BIGINT, cr_refunded_cdemo_sk BIGINT, cr_refunded_hdemo_sk BIGINT, cr_refunded_addr_sk BIGINT, cr_returning_customer_sk BIGINT, cr_returning_cdemo_sk BIGINT, cr_returning_hdemo_sk BIGINT, cr_returning_addr_sk BIGINT, cr_call_center_sk BIGINT, cr_catalog_page_sk BIGINT, cr_ship_mode_sk BIGINT, cr_warehouse_sk BIGINT, cr_reason_sk BIGINT, cr_order_number BIGINT, cr_return_quantity BIGINT, cr_return_amount DECIMAL(7,2), cr_return_tax DECIMAL(7,2), cr_return_amt_inc_tax DECIMAL(7,2), cr_fee DECIMAL(7,2), cr_return_ship_cost DECIMAL(7,2), cr_refunded_cash DECIMAL(7,2), cr_reversed_charge DECIMAL(7,2), cr_store_credit DECIMAL(7,2), cr_net_loss DECIMAL(7,2));;

statement ok
CREATE TABLE catalog_sales(cs_sold_date_sk BIGINT, cs_sold_time_sk BIGINT, cs_ship_date_sk BIGINT, cs_bill_customer_sk BIGINT, cs_bill_cdemo_sk BIGINT, cs_bill_hdemo_sk BIGINT, cs_bill_addr_sk BIGINT, cs_ship_customer_sk BIGINT, cs_ship_cdemo_sk BIGINT, cs_ship_hdemo_sk BIGINT, cs_ship_addr_sk BIGINT, cs_call_center_sk BIGINT, cs_catalog_page_sk BIGINT, cs_ship_mode_sk BIGINT, cs_warehouse_sk BIGINT, cs_item_sk BIGINT, cs_promo_sk BIGINT, cs_order_number BIGINT, cs_quantity BIGINT, cs_wholesale_cost DECIMAL(7,2), cs_list_price DECIMAL(7,2), cs_sales_price DECIMAL(7,2), cs_ext_discount_amt DECIMAL(7,2), cs_ext_sales_price DECIMAL(7,2), cs_ext_wholesale_cost DECIMAL(7,2), cs_ext_list_price DECIMAL(7,2), cs_ext_tax DECIMAL(7,2), cs_coupon_amt DECIMAL(7,2), cs_ext_ship_cost DECIMAL(7,2), cs_net_paid DECIMAL(7,2), cs_net_paid_inc_tax DECIMAL(7,2), cs_net_paid_inc_ship DECIMAL(7,2), cs_net_paid_inc_ship_tax DECIMAL(7,2), cs_net_profit DECIMAL(7,2));;

statement ok
CREATE TABLE customer(c_customer_sk BIGINT, c_customer_id VARCHAR, c_current_cdemo_sk BIGINT, c_current_hdemo_sk BIGINT, c_current_addr_sk BIGINT, c_first_shipto_date_sk BIGINT, c_first_sales_date_sk BIGINT, c_salutation VARCHAR, c_first_name VARCHAR, c_last_name VARCHAR, c_preferred_cust_flag VARCHAR, c_birth_day BIGINT, c_birth_month BIGINT, c_birth_year BIGINT, c_birth_country VARCHAR, c_login VARCHAR, c_email_address VARCHAR, c_last_review_date_sk INTEGER);;

statement ok
CREATE TABLE customer_address(ca_address_sk BIGINT, ca_address_id VARCHAR, ca_street_number VARCHAR, ca_street_name VARCHAR, ca_street_type VARCHAR, ca_suite_number VARCHAR, ca_city VARCHAR, ca_county VARCHAR, ca_state VARCHAR, ca_zip VARCHAR, ca_country VARCHAR, ca_gmt_offset DECIMAL(5,2), ca_location_type VARCHAR);;

statement ok
CREATE TABLE customer_demographics(cd_demo_sk BIGINT, cd_gender VARCHAR, cd_marital_status VARCHAR, cd_education_status VARCHAR, cd_purchase_estimate BIGINT, cd_credit_rating VARCHAR, cd_dep_count BIGINT, cd_dep_employed_count BIGINT, cd_dep_college_count INTEGER);;

statement ok
CREATE TABLE date_dim(d_date_sk BIGINT, d_date_id VARCHAR, d_date DATE, d_month_seq BIGINT, d_week_seq BIGINT, d_quarter_seq BIGINT, d_year BIGINT, d_dow BIGINT, d_moy BIGINT, d_dom BIGINT, d_qoy BIGINT, d_fy_year BIGINT, d_fy_quarter_seq BIGINT, d_fy_week_seq BIGINT, d_day_name VARCHAR, d_quarter_name VARCHAR, d_holiday VARCHAR, d_weekend VARCHAR, d_following_holiday VARCHAR, d_first_dom BIGINT, d_last_dom BIGINT, d_same_day_ly BIGINT, d_same_day_lq BIGINT, d_current_day VARCHAR, d_current_week VARCHAR, d_current_month VARCHAR, d_current_quarter VARCHAR, d_current_year VARCHAR);;

statement ok
CREATE TABLE household_demographics(hd_demo_sk BIGINT, hd_income_band_sk BIGINT, hd_buy_potential VARCHAR, hd_dep_count BIGINT, hd_vehicle_count INTEGER);;

statement ok
CREATE TABLE income_band(ib_income_band_sk BIGINT, ib_lower_bound BIGINT, ib_upper_bound INTEGER);;

statement ok
CREATE TABLE inventory(inv_date_sk BIGINT, inv_item_sk BIGINT, inv_warehouse_sk BIGINT, inv_quantity_on_hand INTEGER);;

statement ok
CREATE TABLE item(i_item_sk BIGINT, i_item_id VARCHAR, i_rec_start_date DATE, i_rec_end_date DATE, i_item_desc VARCHAR, i_current_price DECIMAL(7,2), i_wholesale_cost DECIMAL(7,2), i_brand_id BIGINT, i_brand VARCHAR, i_class_id BIGINT, i_class VARCHAR, i_category_id BIGINT, i_category VARCHAR, i_manufact_id BIGINT, i_manufact VARCHAR, i_size VARCHAR, i_formulation VARCHAR, i_color VARCHAR, i_units VARCHAR, i_container VARCHAR, i_manager_id BIGINT, i_product_name VARCHAR);;

statement ok
CREATE TABLE promotion(p_promo_sk BIGINT, p_promo_id VARCHAR, p_start_date_sk BIGINT, p_end_date_sk BIGINT, p_item_sk BIGINT, p_cost DECIMAL(15,2), p_response_target BIGINT, p_promo_name VARCHAR, p_channel_dmail VARCHAR, p_channel_email VARCHAR, p_channel_catalog VARCHAR, p_channel_tv VARCHAR, p_channel_radio VARCHAR, p_channel_press VARCHAR, p_channel_event VARCHAR, p_channel_demo VARCHAR, p_channel_details VARCHAR, p_purpose VARCHAR, p_discount_active VARCHAR);;

statement ok
CREATE TABLE reason(r_reason_sk BIGINT, r_reason_id VARCHAR, r_reason_desc VARCHAR);;

statement ok
CREATE TABLE ship_mode(sm_ship_mode_sk BIGINT, sm_ship_mode_id VARCHAR, sm_type VARCHAR, sm_code VARCHAR, sm_carrier VARCHAR, sm_contract VARCHAR);;

statement ok
CREATE TABLE store(s_store_sk BIGINT, s_store_id VARCHAR, s_rec_start_date DATE, s_rec_end_date DATE, s_closed_date_sk BIGINT, s_store_name VARCHAR, s_number_employees BIGINT, s_floor_space BIGINT, s_hours VARCHAR, s_manager VARCHAR, s_market_id BIGINT, s_geography_class VARCHAR, s_market_desc VARCHAR, s_market_manager VARCHAR, s_division_id BIGINT, s_division_name VARCHAR, s_company_id BIGINT, s_company_name VARCHAR, s_street_number VARCHAR, s_street_name VARCHAR, s_street_type VARCHAR, s_suite_number VARCHAR, s_city VARCHAR, s_county VARCHAR, s_state VARCHAR, s_zip VARCHAR, s_country VARCHAR, s_gmt_offset DECIMAL(5,2), s_tax_percentage DECIMAL(5,2));;

statement ok
CREATE TABLE store_returns(sr_returned_date_sk BIGINT, sr_return_time_sk BIGINT, sr_item_sk BIGINT, sr_customer_sk BIGINT, sr_cdemo_sk BIGINT, sr_hdemo_sk BIGINT, sr_addr_sk BIGINT, sr_store_sk BIGINT, sr_reason_sk BIGINT, sr_ticket_number BIGINT, sr_return_quantity BIGINT, sr_return_amt DECIMAL(7,2), sr_return_tax DECIMAL(7,2), sr_return_amt_inc_tax DECIMAL(7,2), sr_fee DECIMAL(7,2), sr_return_ship_cost DECIMAL(7,2), sr_refunded_cash DECIMAL(7,2), sr_reversed_charge DECIMAL(7,2), sr_store_credit DECIMAL(7,2), sr_net_loss DECIMAL(7,2));;

statement ok
CREATE TABLE store_sales(ss_sold_date_sk BIGINT, ss_sold_time_sk BIGINT, ss_item_sk BIGINT, ss_customer_sk BIGINT, ss_cdemo_sk BIGINT, ss_hdemo_sk BIGINT, ss_addr_sk BIGINT, ss_store_sk BIGINT, ss_promo_sk BIGINT, ss_ticket_number BIGINT, ss_quantity BIGINT, ss_wholesale_cost DECIMAL(7,2), ss_list_price DECIMAL(7,2), ss_sales_price DECIMAL(7,2), ss_ext_discount_amt DECIMAL(7,2), ss_ext_sales_price DECIMAL(7,2), ss_ext_wholesale_cost DECIMAL(7,2), ss_ext_list_price DECIMAL(7,2), ss_ext_tax DECIMAL(7,2), ss_coupon_amt DECIMAL(7,2), ss_net_paid DECIMAL(7,2), ss_net_paid_inc_tax DECIMAL(7,2), ss_net_profit DECIMAL(7,2));;

statement ok
CREATE TABLE time_dim(t_time_sk BIGINT, t_time_id VARCHAR, t_time BIGINT, t_hour BIGINT, t_minute BIGINT, t_second BIGINT, t_am_pm VARCHAR, t_shift VARCHAR, t_sub_shift VARCHAR, t_meal_time VARCHAR);;

statement ok
CREATE TABLE warehouse(w_warehouse_sk BIGINT, w_warehouse_id VARCHAR, w_warehouse_name VARCHAR, w_warehouse_sq_ft BIGINT, w_street_number VARCHAR, w_street_name VARCHAR, w_street_type VARCHAR, w_suite_number VARCHAR, w_city VARCHAR, w_county VARCHAR, w_state VARCHAR, w_zip VARCHAR, w_country VARCHAR, w_gmt_offset DECIMAL(5,2));;

statement ok
CREATE TABLE web_page(wp_web_page_sk BIGINT, wp_web_page_id VARCHAR, wp_rec_start_date DATE, wp_rec_end_date DATE, wp_creation_date_sk BIGINT, wp_access_date_sk BIGINT, wp_autogen_flag VARCHAR, wp_customer_sk BIGINT, wp_url VARCHAR, wp_type VARCHAR, wp_char_count BIGINT, wp_link_count BIGINT, wp_image_count BIGINT, wp_max_ad_count INTEGER);;

statement ok
CREATE TABLE web_returns(wr_returned_date_sk BIGINT, wr_returned_time_sk BIGINT, wr_item_sk BIGINT, wr_refunded_customer_sk BIGINT, wr_refunded_cdemo_sk BIGINT, wr_refunded_hdemo_sk BIGINT, wr_refunded_addr_sk BIGINT, wr_returning_customer_sk BIGINT, wr_returning_cdemo_sk BIGINT, wr_returning_hdemo_sk BIGINT, wr_returning_addr_sk BIGINT, wr_web_page_sk BIGINT, wr_reason_sk BIGINT, wr_order_number BIGINT, wr_return_quantity BIGINT, wr_return_amt DECIMAL(7,2), wr_return_tax DECIMAL(7,2), wr_return_amt_inc_tax DECIMAL(7,2), wr_fee DECIMAL(7,2), wr_return_ship_cost DECIMAL(7,2), wr_refunded_cash DECIMAL(7,2), wr_reversed_charge DECIMAL(7,2), wr_account_credit DECIMAL(7,2), wr_net_loss DECIMAL(7,2));;

statement ok
CREATE TABLE web_sales(ws_sold_date_sk BIGINT, ws_sold_time_sk BIGINT, ws_ship_date_sk BIGINT, ws_item_sk BIGINT, ws_bill_customer_sk BIGINT, ws_bill_cdemo_sk BIGINT, ws_bill_hdemo_sk BIGINT, ws_bill_addr_sk BIGINT, ws_ship_customer_sk BIGINT, ws_ship_cdemo_sk BIGINT, ws_ship_hdemo_sk BIGINT, ws_ship_addr_sk BIGINT, ws_web_page_sk BIGINT, ws_web_site_sk BIGINT, ws_ship_mode_sk BIGINT, ws_warehouse_sk BIGINT, ws_promo_sk BIGINT, ws_order_number BIGINT, ws_quantity BIGINT, ws_wholesale_cost DECIMAL(7,2), ws_list_price DECIMAL(7,2), ws_sales_price DECIMAL(7,2), ws_ext_discount_amt DECIMAL(7,2), ws_ext_sales_price DECIMAL(7,2), ws_ext_wholesale_cost DECIMAL(7,2), ws_ext_list_price DECIMAL(7,2), ws_ext_tax DECIMAL(7,2), ws_coupon_amt DECIMAL(7,2), ws_ext_ship_cost DECIMAL(7,2), ws_net_paid DECIMAL(7,2), ws_net_paid_inc_tax DECIMAL(7,2), ws_net_paid_inc_ship DECIMAL(7,2), ws_net_paid_inc_ship_tax DECIMAL(7,2), ws_net_profit DECIMAL(7,2));;

statement ok
CREATE TABLE web_site(web_site_sk BIGINT, web_site_id VARCHAR, web_rec_start_date DATE, web_rec_end_date DATE, web_name VARCHAR, web_open_date_sk BIGINT, web_close_date_sk BIGINT, web_class VARCHAR, web_manager VARCHAR, web_mkt_id BIGINT, web_mkt_class VARCHAR, web_mkt_desc VARCHAR, web_market_manager VARCHAR, web_company_id BIGINT, web_company_name VARCHAR, web_street_number VARCHAR, web_street_name VARCHAR, web_street_type VARCHAR, web_suite_number VARCHAR, web_city VARCHAR, web_county VARCHAR, web_state VARCHAR, web_zip VARCHAR, web_country VARCHAR, web_gmt_offset DECIMAL(5,2), web_tax_percentage DECIMAL(5,2));;


foreach threshold -1 0

statement ok
set fivetran_sparse_build_optimizer_column_threshold to ${threshold}

foreach do '' 'column_lifetime'

statement ok
set disabled_optimizers to ${do}

query IIIII nosort q05
WITH ssr AS
  (SELECT s_store_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS returns_,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT ss_store_sk AS store_sk,
             ss_sold_date_sk AS date_sk,
             ss_ext_sales_price AS sales_price,
             ss_net_profit AS profit,
             cast(0 AS decimal(7,2)) AS return_amt,
             cast(0 AS decimal(7,2)) AS net_loss
      FROM store_sales
      UNION ALL SELECT sr_store_sk AS store_sk,
                       sr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7,2)) AS sales_price,
                       cast(0 AS decimal(7,2)) AS profit,
                       sr_return_amt AS return_amt,
                       sr_net_loss AS net_loss
      FROM store_returns ) salesreturns,
        date_dim,
        store
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-06' AS date)
     AND store_sk = s_store_sk
   GROUP BY s_store_id) ,
     csr AS
  (SELECT cp_catalog_page_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS returns_,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT cs_catalog_page_sk AS page_sk,
             cs_sold_date_sk AS date_sk,
             cs_ext_sales_price AS sales_price,
             cs_net_profit AS profit,
             cast(0 AS decimal(7,2)) AS return_amt,
             cast(0 AS decimal(7,2)) AS net_loss
      FROM catalog_sales
      UNION ALL SELECT cr_catalog_page_sk AS page_sk,
                       cr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7,2)) AS sales_price,
                       cast(0 AS decimal(7,2)) AS profit,
                       cr_return_amount AS return_amt,
                       cr_net_loss AS net_loss
      FROM catalog_returns ) salesreturns,
        date_dim,
        catalog_page
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-06' AS date)
     AND page_sk = cp_catalog_page_sk
   GROUP BY cp_catalog_page_id) ,
     wsr AS
  (SELECT web_site_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS returns_,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT ws_web_site_sk AS wsr_web_site_sk,
             ws_sold_date_sk AS date_sk,
             ws_ext_sales_price AS sales_price,
             ws_net_profit AS profit,
             cast(0 AS decimal(7,2)) AS return_amt,
             cast(0 AS decimal(7,2)) AS net_loss
      FROM web_sales
      UNION ALL SELECT ws_web_site_sk AS wsr_web_site_sk,
                       wr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7,2)) AS sales_price,
                       cast(0 AS decimal(7,2)) AS profit,
                       wr_return_amt AS return_amt,
                       wr_net_loss AS net_loss
      FROM web_returns
      LEFT OUTER JOIN web_sales ON (wr_item_sk = ws_item_sk
                                    AND wr_order_number = ws_order_number) ) salesreturns,
        date_dim,
        web_site
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-06' AS date)
     AND wsr_web_site_sk = web_site_sk
   GROUP BY web_site_id)
SELECT channel ,
       id ,
       sum(sales) AS sales ,
       sum(returns_) AS returns_ ,
       sum(profit) AS profit
FROM
  (SELECT 'store channel' AS channel ,
          concat('store', s_store_id) AS id ,
          sales ,
          returns_ ,
          (profit - profit_loss) AS profit
   FROM ssr
   UNION ALL SELECT 'catalog channel' AS channel ,
                    concat('catalog_page', cp_catalog_page_id) AS id ,
                    sales ,
                    returns_ ,
                    (profit - profit_loss) AS profit
   FROM csr
   UNION ALL SELECT 'web channel' AS channel ,
                    concat('web_site', web_site_id) AS id ,
                    sales ,
                    returns_ ,
                    (profit - profit_loss) AS profit
   FROM wsr ) x
GROUP BY ROLLUP (channel,
                 id)
ORDER BY channel NULLS FIRST,
         id NULLS FIRST
LIMIT 100;
----

query IIII nosort q40
SELECT w_state,
       i_item_id,
       sum(CASE
               WHEN (cast(d_date AS date) < CAST ('2000-03-11' AS date)) THEN cs_sales_price - coalesce(cr_refunded_cash,0)
               ELSE 0
           END) AS sales_before,
       sum(CASE
               WHEN (cast(d_date AS date) >= CAST ('2000-03-11' AS date)) THEN cs_sales_price - coalesce(cr_refunded_cash,0)
               ELSE 0
           END) AS sales_after
FROM catalog_sales
LEFT OUTER JOIN catalog_returns ON (cs_order_number = cr_order_number
                                    AND cs_item_sk = cr_item_sk) ,warehouse,
                                                                  item,
                                                                  date_dim
WHERE i_current_price BETWEEN 0.99 AND 1.49
  AND i_item_sk = cs_item_sk
  AND cs_warehouse_sk = w_warehouse_sk
  AND cs_sold_date_sk = d_date_sk
  AND d_date BETWEEN CAST ('2000-02-10' AS date) AND CAST ('2000-04-10' AS date)
GROUP BY w_state,
         i_item_id
ORDER BY w_state,
         i_item_id
LIMIT 100;
----

query IIIII nosort q49
SELECT channel,
       item,
       return_ratio,
       return_rank,
       currency_rank
FROM
  (SELECT 'web' AS channel,
          web.item,
          web.return_ratio,
          web.return_rank,
          web.currency_rank
   FROM
     (SELECT item,
             return_ratio,
             currency_ratio,
             rank() OVER (
                          ORDER BY return_ratio) AS return_rank,
                         rank() OVER (
                                      ORDER BY currency_ratio) AS currency_rank
      FROM
        (SELECT ws.ws_item_sk AS item,
                (cast(sum(coalesce(wr.wr_return_quantity,0)) AS decimal(15,4))/ cast(sum(coalesce(ws.ws_quantity,0)) AS decimal(15,4))) AS return_ratio,
                (cast(sum(coalesce(wr.wr_return_amt,0)) AS decimal(15,4))/ cast(sum(coalesce(ws.ws_net_paid,0)) AS decimal(15,4))) AS currency_ratio
         FROM web_sales ws
         LEFT OUTER JOIN web_returns wr ON (ws.ws_order_number = wr.wr_order_number
                                            AND ws.ws_item_sk = wr.wr_item_sk) ,date_dim
         WHERE wr.wr_return_amt > 10000
           AND ws.ws_net_profit > 1
           AND ws.ws_net_paid > 0
           AND ws.ws_quantity > 0
           AND ws_sold_date_sk = d_date_sk
           AND d_year = 2001
           AND d_moy = 12
         GROUP BY ws.ws_item_sk) in_web) web
   WHERE (web.return_rank <= 10
          OR web.currency_rank <= 10)
   UNION SELECT 'catalog' AS channel,
                catalog.item,
                catalog.return_ratio,
                catalog.return_rank,
                catalog.currency_rank
   FROM
     (SELECT item,
             return_ratio,
             currency_ratio,
             rank() OVER (
                          ORDER BY return_ratio) AS return_rank,
                         rank() OVER (
                                      ORDER BY currency_ratio) AS currency_rank
      FROM
        (SELECT cs.cs_item_sk AS item,
                (cast(sum(coalesce(cr.cr_return_quantity,0)) AS decimal(15,4))/ cast(sum(coalesce(cs.cs_quantity,0)) AS decimal(15,4))) AS return_ratio,
                (cast(sum(coalesce(cr.cr_return_amount,0)) AS decimal(15,4))/ cast(sum(coalesce(cs.cs_net_paid,0)) AS decimal(15,4))) AS currency_ratio
         FROM catalog_sales cs
         LEFT OUTER JOIN catalog_returns cr ON (cs.cs_order_number = cr.cr_order_number
                                                AND cs.cs_item_sk = cr.cr_item_sk) ,date_dim
         WHERE cr.cr_return_amount > 10000
           AND cs.cs_net_profit > 1
           AND cs.cs_net_paid > 0
           AND cs.cs_quantity > 0
           AND cs_sold_date_sk = d_date_sk
           AND d_year = 2001
           AND d_moy = 12
         GROUP BY cs.cs_item_sk) in_cat) CATALOG
   WHERE (catalog.return_rank <= 10
          OR catalog.currency_rank <=10)
   UNION SELECT 'store' AS channel,
                store.item,
                store.return_ratio,
                store.return_rank,
                store.currency_rank
   FROM
     (SELECT item,
             return_ratio,
             currency_ratio,
             rank() OVER (
                          ORDER BY return_ratio) AS return_rank,
                         rank() OVER (
                                      ORDER BY currency_ratio) AS currency_rank
      FROM
        (SELECT sts.ss_item_sk AS item,
                (cast(sum(coalesce(sr.sr_return_quantity,0)) AS decimal(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) AS decimal(15,4))) AS return_ratio,
                (cast(sum(coalesce(sr.sr_return_amt,0)) AS decimal(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) AS decimal(15,4))) AS currency_ratio
         FROM store_sales sts
         LEFT OUTER JOIN store_returns sr ON (sts.ss_ticket_number = sr.sr_ticket_number
                                              AND sts.ss_item_sk = sr.sr_item_sk) ,date_dim
         WHERE sr.sr_return_amt > 10000
           AND sts.ss_net_profit > 1
           AND sts.ss_net_paid > 0
           AND sts.ss_quantity > 0
           AND ss_sold_date_sk = d_date_sk
           AND d_year = 2001
           AND d_moy = 12
         GROUP BY sts.ss_item_sk) in_store) store
   WHERE (store.return_rank <= 10
          OR store.currency_rank <= 10) ) sq1
ORDER BY 1 NULLS FIRST,
         4 NULLS FIRST,
         5 NULLS FIRST,
         2 NULLS FIRST
LIMIT 100;
----

query IIIIII nosort q72
SELECT i_item_desc,
       w_warehouse_name,
       d1.d_week_seq,
       sum(CASE
               WHEN p_promo_sk IS NULL THEN 1
               ELSE 0
           END) no_promo,
       sum(CASE
               WHEN p_promo_sk IS NOT NULL THEN 1
               ELSE 0
           END) promo,
       count(*) total_cnt
FROM catalog_sales
JOIN inventory ON (cs_item_sk = inv_item_sk)
JOIN warehouse ON (w_warehouse_sk=inv_warehouse_sk)
JOIN item ON (i_item_sk = cs_item_sk)
JOIN customer_demographics ON (cs_bill_cdemo_sk = cd_demo_sk)
JOIN household_demographics ON (cs_bill_hdemo_sk = hd_demo_sk)
JOIN date_dim d1 ON (cs_sold_date_sk = d1.d_date_sk)
JOIN date_dim d2 ON (inv_date_sk = d2.d_date_sk)
JOIN date_dim d3 ON (cs_ship_date_sk = d3.d_date_sk)
LEFT OUTER JOIN promotion ON (cs_promo_sk=p_promo_sk)
LEFT OUTER JOIN catalog_returns ON (cr_item_sk = cs_item_sk
                                    AND cr_order_number = cs_order_number)
WHERE d1.d_week_seq = d2.d_week_seq
  AND inv_quantity_on_hand < cs_quantity
  AND d3.d_date > d1.d_date + 5 -- SQL Server: DATEADD(day, 5, d1.d_date)
  AND hd_buy_potential = '>10000'
  AND d1.d_year = 1999
  AND cd_marital_status = 'D'
GROUP BY i_item_desc,
         w_warehouse_name,
         d1.d_week_seq
ORDER BY total_cnt DESC NULLS FIRST,
         i_item_desc NULLS FIRST,
         w_warehouse_name NULLS FIRST,
         d1.d_week_seq NULLS FIRST
LIMIT 100;
----

query IIIIIIIIII nosort q75
WITH all_sales AS
  ( SELECT d_year ,
           i_brand_id ,
           i_class_id ,
           i_category_id ,
           i_manufact_id ,
           SUM(sales_cnt) AS sales_cnt ,
           SUM(sales_amt) AS sales_amt
   FROM
     (SELECT d_year ,
             i_brand_id ,
             i_class_id ,
             i_category_id ,
             i_manufact_id ,
             cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt ,
             cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
      FROM catalog_sales
      JOIN item ON i_item_sk=cs_item_sk
      JOIN date_dim ON d_date_sk=cs_sold_date_sk
      LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number
                                    AND cs_item_sk=cr_item_sk)
      WHERE i_category='Books'
      UNION SELECT d_year ,
                   i_brand_id ,
                   i_class_id ,
                   i_category_id ,
                   i_manufact_id ,
                   ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt ,
                   ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
      FROM store_sales
      JOIN item ON i_item_sk=ss_item_sk
      JOIN date_dim ON d_date_sk=ss_sold_date_sk
      LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number
                                  AND ss_item_sk=sr_item_sk)
      WHERE i_category='Books'
      UNION SELECT d_year ,
                   i_brand_id ,
                   i_class_id ,
                   i_category_id ,
                   i_manufact_id ,
                   ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt ,
                   ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
      FROM web_sales
      JOIN item ON i_item_sk=ws_item_sk
      JOIN date_dim ON d_date_sk=ws_sold_date_sk
      LEFT JOIN web_returns ON (ws_order_number=wr_order_number
                                AND ws_item_sk=wr_item_sk)
      WHERE i_category='Books') sales_detail
   GROUP BY d_year,
            i_brand_id,
            i_class_id,
            i_category_id,
            i_manufact_id)
SELECT prev_yr.d_year AS prev_year ,
       curr_yr.d_year AS year_ ,
       curr_yr.i_brand_id ,
       curr_yr.i_class_id ,
       curr_yr.i_category_id ,
       curr_yr.i_manufact_id ,
       prev_yr.sales_cnt AS prev_yr_cnt ,
       curr_yr.sales_cnt AS curr_yr_cnt ,
       curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff ,
       curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
FROM all_sales curr_yr,
     all_sales prev_yr
WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
  AND curr_yr.i_class_id=prev_yr.i_class_id
  AND curr_yr.i_category_id=prev_yr.i_category_id
  AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
  AND curr_yr.d_year=2002
  AND prev_yr.d_year=2002-1
  AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
ORDER BY sales_cnt_diff,
         sales_amt_diff
LIMIT 100;
----

query IIIII nosort q77
WITH ss AS
  (SELECT s_store_sk,
          sum(ss_ext_sales_price) AS sales,
          sum(ss_net_profit) AS profit
   FROM store_sales,
        date_dim,
        store
   WHERE ss_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND ss_store_sk = s_store_sk
   GROUP BY s_store_sk) ,
     sr AS
  (SELECT s_store_sk,
          sum(sr_return_amt) AS returns_,
          sum(sr_net_loss) AS profit_loss
   FROM store_returns,
        date_dim,
        store
   WHERE sr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND sr_store_sk = s_store_sk
   GROUP BY s_store_sk),
     cs AS
  (SELECT cs_call_center_sk,
          sum(cs_ext_sales_price) AS sales,
          sum(cs_net_profit) AS profit
   FROM catalog_sales,
        date_dim
   WHERE cs_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
   GROUP BY cs_call_center_sk),
     cr AS
  (SELECT cr_call_center_sk,
          sum(cr_return_amount) AS returns_,
          sum(cr_net_loss) AS profit_loss
   FROM catalog_returns,
        date_dim
   WHERE cr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
   GROUP BY cr_call_center_sk ),
     ws AS
  (SELECT wp_web_page_sk,
          sum(ws_ext_sales_price) AS sales,
          sum(ws_net_profit) AS profit
   FROM web_sales,
        date_dim,
        web_page
   WHERE ws_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND ws_web_page_sk = wp_web_page_sk
   GROUP BY wp_web_page_sk),
     wr AS
  (SELECT wp_web_page_sk,
          sum(wr_return_amt) AS returns_,
          sum(wr_net_loss) AS profit_loss
   FROM web_returns,
        date_dim,
        web_page
   WHERE wr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND wr_web_page_sk = wp_web_page_sk
   GROUP BY wp_web_page_sk)
SELECT channel ,
       id ,
       sum(sales) AS sales ,
       sum(returns_) AS returns_ ,
       sum(profit) AS profit
FROM
  (SELECT 'store channel' AS channel ,
          ss.s_store_sk AS id ,
          sales ,
          coalesce(returns_, 0) AS returns_ ,
          (profit - coalesce(profit_loss,0)) AS profit
   FROM ss
   LEFT JOIN sr ON ss.s_store_sk = sr.s_store_sk
   UNION ALL SELECT 'catalog channel' AS channel ,
                    cs_call_center_sk AS id ,
                    sales ,
                    returns_ ,
                    (profit - profit_loss) AS profit
   FROM cs ,
        cr
   UNION ALL SELECT 'web channel' AS channel ,
                    ws.wp_web_page_sk AS id ,
                    sales ,
                    coalesce(returns_, 0) returns_ ,
                    (profit - coalesce(profit_loss,0)) AS profit
   FROM ws
   LEFT JOIN wr ON ws.wp_web_page_sk = wr.wp_web_page_sk ) x
GROUP BY ROLLUP (channel,
                 id)
ORDER BY channel NULLS FIRST,
         id NULLS FIRST,
         returns_ DESC
LIMIT 100;
----

query IIIIIIIIII nosort q78
WITH ws AS
  (SELECT d_year AS ws_sold_year,
          ws_item_sk,
          ws_bill_customer_sk ws_customer_sk,
          sum(ws_quantity) ws_qty,
          sum(ws_wholesale_cost) ws_wc,
          sum(ws_sales_price) ws_sp
   FROM web_sales
   LEFT JOIN web_returns ON wr_order_number=ws_order_number
   AND ws_item_sk=wr_item_sk
   JOIN date_dim ON ws_sold_date_sk = d_date_sk
   WHERE wr_order_number IS NULL
   GROUP BY d_year,
            ws_item_sk,
            ws_bill_customer_sk ),
     cs AS
  (SELECT d_year AS cs_sold_year,
          cs_item_sk,
          cs_bill_customer_sk cs_customer_sk,
          sum(cs_quantity) cs_qty,
          sum(cs_wholesale_cost) cs_wc,
          sum(cs_sales_price) cs_sp
   FROM catalog_sales
   LEFT JOIN catalog_returns ON cr_order_number=cs_order_number
   AND cs_item_sk=cr_item_sk
   JOIN date_dim ON cs_sold_date_sk = d_date_sk
   WHERE cr_order_number IS NULL
   GROUP BY d_year,
            cs_item_sk,
            cs_bill_customer_sk ),
     ss AS
  (SELECT d_year AS ss_sold_year,
          ss_item_sk,
          ss_customer_sk,
          sum(ss_quantity) ss_qty,
          sum(ss_wholesale_cost) ss_wc,
          sum(ss_sales_price) ss_sp
   FROM store_sales
   LEFT JOIN store_returns ON sr_ticket_number=ss_ticket_number
   AND ss_item_sk=sr_item_sk
   JOIN date_dim ON ss_sold_date_sk = d_date_sk
   WHERE sr_ticket_number IS NULL
   GROUP BY d_year,
            ss_item_sk,
            ss_customer_sk )
SELECT ss_sold_year,
       ss_item_sk,
       ss_customer_sk,
       round((ss_qty*1.00)/(coalesce(ws_qty,0)+coalesce(cs_qty,0)),2) ratio,
       ss_qty store_qty,
       ss_wc store_wholesale_cost,
       ss_sp store_sales_price,
       coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
       coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
       coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
FROM ss
LEFT JOIN ws ON (ws_sold_year=ss_sold_year
                 AND ws_item_sk=ss_item_sk
                 AND ws_customer_sk=ss_customer_sk)
LEFT JOIN cs ON (cs_sold_year=ss_sold_year
                 AND cs_item_sk=ss_item_sk
                 AND cs_customer_sk=ss_customer_sk)
WHERE (coalesce(ws_qty,0)>0
       OR coalesce(cs_qty, 0)>0)
  AND ss_sold_year=2000
ORDER BY ss_sold_year,
         ss_item_sk,
         ss_customer_sk,
         ss_qty DESC,
         ss_wc DESC,
         ss_sp DESC,
         other_chan_qty,
         other_chan_wholesale_cost,
         other_chan_sales_price,
         ratio
LIMIT 100;
----

query IIIII nosort q80
WITH ssr AS
  (SELECT s_store_id AS store_id,
          sum(ss_ext_sales_price) AS sales,
          sum(coalesce(sr_return_amt, 0)) AS returns_,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) AS profit
   FROM store_sales
   LEFT OUTER JOIN store_returns ON (ss_item_sk = sr_item_sk
                                     AND ss_ticket_number = sr_ticket_number), date_dim,
                                                                               store,
                                                                               item,
                                                                               promotion
   WHERE ss_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND ss_store_sk = s_store_sk
     AND ss_item_sk = i_item_sk
     AND i_current_price > 50
     AND ss_promo_sk = p_promo_sk
     AND p_channel_tv = 'N'
   GROUP BY s_store_id) ,
     csr AS
  (SELECT cp_catalog_page_id AS catalog_page_id,
          sum(cs_ext_sales_price) AS sales,
          sum(coalesce(cr_return_amount, 0)) AS returns_,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) AS profit
   FROM catalog_sales
   LEFT OUTER JOIN catalog_returns ON (cs_item_sk = cr_item_sk
                                       AND cs_order_number = cr_order_number), date_dim,
                                                                               catalog_page,
                                                                               item,
                                                                               promotion
   WHERE cs_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND cs_catalog_page_sk = cp_catalog_page_sk
     AND cs_item_sk = i_item_sk
     AND i_current_price > 50
     AND cs_promo_sk = p_promo_sk
     AND p_channel_tv = 'N'
   GROUP BY cp_catalog_page_id) ,
     wsr AS
  (SELECT web_site_id,
          sum(ws_ext_sales_price) AS sales,
          sum(coalesce(wr_return_amt, 0)) AS returns_,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) AS profit
   FROM web_sales
   LEFT OUTER JOIN web_returns ON (ws_item_sk = wr_item_sk
                                   AND ws_order_number = wr_order_number), date_dim,
                                                                           web_site,
                                                                           item,
                                                                           promotion
   WHERE ws_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast('2000-08-23' AS date) AND cast('2000-09-22' AS date)
     AND ws_web_site_sk = web_site_sk
     AND ws_item_sk = i_item_sk
     AND i_current_price > 50
     AND ws_promo_sk = p_promo_sk
     AND p_channel_tv = 'N'
   GROUP BY web_site_id)
SELECT channel ,
       id ,
       sum(sales) AS sales ,
       sum(returns_) AS returns_ ,
       sum(profit) AS profit
FROM
  (SELECT 'store channel' AS channel ,
          concat('store', store_id) AS id ,
          sales ,
          returns_ ,
          profit
   FROM ssr
   UNION ALL SELECT 'catalog channel' AS channel ,
                    concat('catalog_page', catalog_page_id) AS id ,
                    sales ,
                    returns_ ,
                    profit
   FROM csr
   UNION ALL SELECT 'web channel' AS channel ,
                    concat('web_site', web_site_id) AS id ,
                    sales ,
                    returns_ ,
                    profit
   FROM wsr ) x
GROUP BY ROLLUP (channel,
                 id)
ORDER BY channel NULLS FIRST,
         id NULLS FIRST
LIMIT 100;
----

query II nosort q93
SELECT ss_customer_sk,
       sum(act_sales) sumsales
FROM
  (SELECT ss_item_sk,
          ss_ticket_number,
          ss_customer_sk,
          CASE
              WHEN sr_return_quantity IS NOT NULL THEN (ss_quantity-sr_return_quantity)*ss_sales_price
              ELSE (ss_quantity*ss_sales_price)
          END act_sales
   FROM store_sales
   LEFT OUTER JOIN store_returns ON (sr_item_sk = ss_item_sk
                                     AND sr_ticket_number = ss_ticket_number) ,reason
   WHERE sr_reason_sk = r_reason_sk
     AND r_reason_desc = 'reason 28') t
GROUP BY ss_customer_sk
ORDER BY sumsales NULLS FIRST,
         ss_customer_sk NULLS FIRST
LIMIT 100;
----

endloop

endloop
